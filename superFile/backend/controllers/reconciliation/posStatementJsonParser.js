/**
 * @author rahul.jain@zenqore.com 
 */

const mongoDB = require('mongodb');
const mongoose = require("mongoose");
const mapperJson = require('./posStatementMapper.json');
const fs = require('fs');
const mongoDbUrl = "mongodb://20.44.39.232:30000";
const dbName = "5fe9700758c6b7bbb7014222";
const bseCollectionName = "bankstmtentries";
const bseSchema = require("../../models/schemas/bankStatementEntries-model");
const {
    checkDatabaseExists,
    createDatabase,
    createConnection,
} = require("../../models/db_creation");

/**
 * Takes a JSON (generated by Mehul's code), parses it, 
 * and saves the parsed data into the MongoDB collection - 'posstmtentries' 
 * @param {*} stmtFilePath - path to the JSON file that was generated by Mehul 
 */
async function parseDataMapJson(stmtFilePath) {
    const dbConnection = await createConnection(dbName, mongoDbUrl);
    // console.log(dbConnection); 

    let posStmt = null;
    try {
        const jsonString = fs.readFileSync(stmtFilePath);
        posStmt = JSON.parse(jsonString);
    } catch (err) {
        console.log(err)
    }

    const map = mapperJson[posStmt.bank];
    // console.log(map); 
    let dateCol = map.txnDateColPosition;
    let dateFormat = map.dateFormat;
    let dateDelimiter = map.dateDelimiter;
    let txnAmountCol = map.txnAmountColPosition;
    let cardNumCol = map.cardNumColPosition;
    let authCodeCol = map.authCodeColPosition;

    let count = 0;
    var totalAmount = 0.0;
    console.log("bank: " + posStmt.bank);
    console.log("account_number: " + posStmt.account_number);
    var BseModel = dbConnection.model(bseCollectionName, bseSchema);

    var entries = posStmt.entries; 
    for (entry of entries) {
    // entries.forEach(async function (entry) {
        let pseData = {
            bankName: posStmt.bank.trim(),
            accountNumber: posStmt.account_number, 
            statementType: 'POS'
        }
        pseData.transactionDate = stringToDate(entry[dateCol], dateFormat, dateDelimiter);
        pseData.cardNumber = entry[cardNumCol];
        pseData.approvalCode = entry[authCodeCol];
        pseData.creditAmount = removeCommas(entry[txnAmountCol]);

        count++;
        let bseModel = new BseModel(pseData);
        var savedData = await bseModel.save();
    } // for 
    // }); // foreach 

    totalAmount = Math.round((totalAmount + Number.EPSILON) * 100) / 100;

    console.log("txn count: " + count);
    console.log("----------------------------------------------")

    dbConnection.close();
} // parseDataMapJson

/**
 * helper function - removes all the commas from a string that represents amount
 * @param {*} stringAmount 
 */
function removeCommas(stringAmount) {
    if (stringAmount == null || stringAmount == "")
        return 0.0;
    else
        return parseFloat(stringAmount.replace(/[,]/g, ''));
}

/**
 * please refactor this function (and from bankStatementJsonParser) into a common util 
 * @param {} _date 
 * @param {*} _format 
 * @param {*} _delimiter 
 */
function stringToDate(_date, _format, _delimiter) {
    try {
        // console.log(_date + " " + _format + " " + _delimiter); 
        var dateStr = "";
        var formatLowerCase = _format.toLowerCase();
        if (formatLowerCase == "ddmonyy") {
            var date = _date.substring(0, 2);
            var month = _date.substring(2, 5);
            var year = _date.substring(5, 7);
            dateStr = month + " " + date + " " + year + " 00:00:00 UTC";
        } else if (formatLowerCase == "dd mon yyyy" || formatLowerCase == "dd-mon-yyyy") {
            var date = _date.substring(0, 2);
            var month = _date.substring(3, 6);
            var year = _date.substring(7, 11);
            dateStr = month + " " + date + " " + year + " 00:00:00 UTC";
        } else if (formatLowerCase == "dd-mm-yy" || formatLowerCase == "dd/mm/yy") {
            var date = _date.substring(0, 2);
            var month = _date.substring(3, 5);
            var year = _date.substring(6, 8);
            dateStr = "20" + year + "-" + month + "-" + date + " 00:00:00 UTC";
        } else if (formatLowerCase == "dd-mm-yyyy" || formatLowerCase == "dd/mm/yyyy") {
            var date = _date.substring(0, 2);
            var month = _date.substring(3, 5);
            var year = _date.substring(6, 10);
            dateStr = year + "-" + month + "-" + date + " 00:00:00 UTC";
        } else if (formatLowerCase == "dd/mm/ yyyy") {
            var date = _date.substring(0, 2);
            var month = _date.substring(3, 5);
            var year = _date.substring(7, 11);
            dateStr = year + "-" + month + "-" + date + " 00:00:00 UTC";
        } else {
            var formatItems = formatLowerCase.split(_delimiter);
            var dateItems = _date.split(_delimiter);
            var monthIndex = formatItems.indexOf("mm");
            var dayIndex = formatItems.indexOf("dd");
            var yearIndex = formatItems.indexOf("yyyy");
            var month = parseInt(dateItems[monthIndex]);
            // month -= 1;
            if (dateItems[yearIndex].length == 2) {
                dateItems[yearIndex] = "20" + dateItems[yearIndex];
            }
            // var formatedDate = new Date(dateItems[yearIndex], month, dateItems[dayIndex]);
            dateStr = dateItems[yearIndex] + "-" + month + "-" + dateItems[dayIndex]
                + " 00:00:00 UTC";
        }
        // console.log(dateStr); 
        var formatedDate = new Date(dateStr);
        return formatedDate;
    } catch (err) {
        console.log(err);
        return null; 
    }
} // stringToDate

async function parseJsons() {
    parseDataMapJson("../../../reconDataMapJsons/zq_data_JK_POS_stmt_2.json");
} // parseJsons

parseJsons();
